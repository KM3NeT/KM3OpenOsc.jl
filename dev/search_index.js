var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"","category":"page"},{"location":"api/#Oscillations-Open-Data","page":"API","title":"Oscillations Open Data","text":"","category":"section"},{"location":"api/#KM3OpenOsc.HistogramDefinitions","page":"API","title":"KM3OpenOsc.HistogramDefinitions","text":"struct HistogramDefinitions\n\nHistogramDefinitions is a structure defining the binning for histograms.\n\nFields\n\nxbins::Union{Int64, Vector{Float64}}\nybins::Union{Nothing, Int64, Vector{Float64}}\n\n\n\n\n\n","category":"type"},{"location":"api/#KM3OpenOsc.HistogramsOscillations","page":"API","title":"KM3OpenOsc.HistogramsOscillations","text":"struct HistogramsOscillations\n\nHistogramsOscillationsis a structure containing histograms for oscillation analysis.\n\nFields\n\nhists_true::Dict{String, FHist.Hist2D}\nhists_reco::Dict{String, FHist.Hist2D}\n\n\n\n\n\n","category":"type"},{"location":"api/#KM3OpenOsc.fill_hist_by_bin!","page":"API","title":"KM3OpenOsc.fill_hist_by_bin!","text":"fill_hist_by_bin!(h::FHist.Hist2D, xbin::Int64, ybin::Int64, w::Float64, werr::Float64) -> Float64\n\n\nFill a histogram bin with a given weight and error.\n\n\n\n\n\n","category":"function"},{"location":"api/#KM3OpenOsc.fill_all_hists_from_event!","page":"API","title":"KM3OpenOsc.fill_all_hists_from_event!","text":"fill_all_hists_from_event!(hs::HistogramsOscillations, e::KM3io.ResponseMatrixBin) -> Float64\n\n\nFill all histograms based on an event.\n\n\n\n\n\n","category":"function"},{"location":"api/#KM3OpenOsc.fill_all_hists_from_event_oscillations_and_flux!","page":"API","title":"KM3OpenOsc.fill_all_hists_from_event_oscillations_and_flux!","text":"fill_all_hists_from_event_oscillations_and_flux!(hs::HistogramsOscillations, e::KM3io.ResponseMatrixBin, flux_dict::Dict)\nfill_all_hists_from_event_oscillations_and_flux!(hs::HistogramsOscillations, e::KM3io.ResponseMatrixBin, flux_dict::Dict, U0::Union{Nothing, Matrix{ComplexF64}})\nfill_all_hists_from_event_oscillations_and_flux!(hs::HistogramsOscillations, e::KM3io.ResponseMatrixBin, flux_dict::Dict, U0::Union{Nothing, Matrix{ComplexF64}}, H0::Union{Nothing, Vector{ComplexF64}}) -> Float64\n\n\nFill histograms for an event, applying oscillations and flux weights.\n\n\n\n\n\n","category":"function"},{"location":"api/#KM3OpenOsc.get_flux_dict","page":"API","title":"KM3OpenOsc.get_flux_dict","text":"get_flux_dict() -> Dict{Int32, NuFlux.FluxTable}\nget_flux_dict(flux_path::String) -> Dict{Int32, NuFlux.FluxTable}\n\n\nRetrieve a dictionary of neutrino fluxes from the Honda flux model.\n\n\n\n\n\n","category":"function"},{"location":"api/#KM3OpenOsc.get_oscillation_matrices","page":"API","title":"KM3OpenOsc.get_oscillation_matrices","text":"get_oscillation_matrices() -> Tuple{Matrix{ComplexF64}, Vector{ComplexF64}}\nget_oscillation_matrices(nu_params::Dict) -> Tuple{Matrix{ComplexF64}, Vector{ComplexF64}}\n\n\nCompute the PMNS matrix and Hamiltonian for neutrino oscillations.\n\nNotes\n\nDefault parameters are based on NuFit v5.1 results http://www.nu-fit.org/?q=node/238.\n\n\n\n\n\n","category":"function"},{"location":"api/#KM3OpenOsc.build_HDF5_file","page":"API","title":"KM3OpenOsc.build_HDF5_file","text":"build_HDF5_file() -> KM3io.H5File\nbuild_HDF5_file(filename::String) -> KM3io.H5File\n\n\nBuild an HDF5 file with datasets for neutrino, muon, and data events.\n\n\n\n\n\n","category":"function"},{"location":"api/#KM3OpenOsc.export_histograms_hdf5","page":"API","title":"KM3OpenOsc.export_histograms_hdf5","text":"export_histograms_hdf5(histo::HistogramsOscillations, filename::String)\n\n\nExport histograms to an HDF5 file.\n\n\n\n\n\n","category":"function"},{"location":"api/#KM3OpenOsc.create_histograms","page":"API","title":"KM3OpenOsc.create_histograms","text":"create_histograms(fpath::String) -> HistogramsOscillations\n\n\nCreate histograms from either a ROOT file or a JSON file.\n\n\n\n\n\n","category":"function"},{"location":"api/#KM3OpenOsc.fill_response!","page":"API","title":"KM3OpenOsc.fill_response!","text":"fill_response!(hs::HistogramsOscillations, f::KM3io.OscOpenDataTree)\nfill_response!(hs::HistogramsOscillations, f::KM3io.OscOpenDataTree, flux_dict::Union{Nothing, Dict})\nfill_response!(hs::HistogramsOscillations, f::KM3io.OscOpenDataTree, flux_dict::Union{Nothing, Dict}, U0::Union{Nothing, Matrix{ComplexF64}})\nfill_response!(hs::HistogramsOscillations, f::KM3io.OscOpenDataTree, flux_dict::Union{Nothing, Dict}, U0::Union{Nothing, Matrix{ComplexF64}}, H0::Union{Nothing, Vector{ComplexF64}})\n\n\nFill histograms with events from an KM3io.OscOpenDataTree, optionally applying oscillations and flux weights.\n\n\n\n\n\n","category":"function"},{"location":"#KM3OpenOsc.jl","page":"Home","title":"KM3OpenOsc.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to the KM3OpenOsc.jl repository!","category":"page"},{"location":"#Documentation","page":"Home","title":"Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Check out the Latest Documention which also includes tutorials and examples.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"KM3OpenOsc.jl is not an officially registered Julia package but it's available via the KM3NeT Julia registry. To add the KM3NeT Julia registry to your local Julia registry list, follow the instructions in its README or simply do","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://git.km3net.de/common/julia-registry ~/.julia/registries/KM3NeT","category":"page"},{"location":"","page":"Home","title":"Home","text":"After that, you can add KM3OpenOsc.jl just like any other Julia package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.add(\"KM3OpenOsc\")","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using KM3OpenOsc","category":"page"},{"location":"#Quick-example-with-KM3NeT-Test-data","page":"Home","title":"Quick example with KM3NeT Test data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First we load the packages needed","category":"page"},{"location":"","page":"Home","title":"Home","text":"using KM3OpenOsc\nusing KM3io\nusing KM3NeTTestData\nusing NuFlux","category":"page"},{"location":"","page":"Home","title":"Home","text":"Set up a couple of paths to load files from the test data","category":"page"},{"location":"","page":"Home","title":"Home","text":"\nOSCFILE = KM3NeTTestData.datapath(\"oscillations\", \"ORCA6_433kt-y_opendata_v0.5_testdata.root\")\nBINDEF = KM3NeTTestData.datapath(\"oscillations\", \"bins_433kt-y_v0.4.json\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can now load the open data file and check its contents","category":"page"},{"location":"","page":"Home","title":"Home","text":"f = KM3io.OSCFile(OSCFILE)\nnu = f.osc_opendata_nu\ndata = f.osc_opendata_data","category":"page"},{"location":"","page":"Home","title":"Home","text":"Given the file of binning definition we can create a set of histograms for reco and true fiven the datasample","category":"page"},{"location":"","page":"Home","title":"Home","text":"hn = create_histograms(BINDEF)\nhd = create_histograms(BINDEF)","category":"page"},{"location":"","page":"Home","title":"Home","text":"A set of oscillations parameters can be given as an argument for the get_oscillation_matrices function which computes matrices used to compute oscillations probabilities. This function uses Neurthino.jl behind the scenes","category":"page"},{"location":"","page":"Home","title":"Home","text":"BF = Dict(\"dm_21\" => 7.42e-5, #ORCA 433 kt-y standard oscillations Best Fit\n                       \"dm_31\" => 2.18e-3,\n                       \"theta_12\" => deg2rad(33.45),\n                       \"theta_23\" => deg2rad(45.57299599919429),\n                       \"theta_13\" => deg2rad(8.62),\n                       \"dcp\" => deg2rad(230))\nU,H = get_oscillation_matrices(BF) # If no dict of parameters is provided NuFit is selected by default","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package also allows to input any Honda flux for any site.  Local files may also be used, we just have to give the right path to the get_flux_dict function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"NUFLUX_PATH = split(Base.pathof(NuFlux), \"src\")[1]\nFLUX_DATA_DIR = joinpath(NUFLUX_PATH, \"data\")\nflux_path = joinpath(FLUX_DATA_DIR, \"frj-ally-20-12-solmin.d\") # Get flux of Honda Frejus site from NuFlux\n\nflux_dict = get_flux_dict(flux_path) # If no flux path is provided, Honda flux at frejus site is taken by default","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once all the ingredients have been computed we can fill the initialized histograms. fill_response! will take care of filling all the empty histograms for true and reco quantities depending on the dataset given.","category":"page"},{"location":"","page":"Home","title":"Home","text":"fill_response!(hn, nu, flux_dict, U, H; oscillations=true) # fill neutrinos ,need flux and oscillation parameters\nfill_response!(hd, data) # fill data, don't need to specify much","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can also export the histograms to HDF5 using the export_histograms_hdf5 function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"export_histograms_hdf5(hn, \"neutrino_histograms_from_testdata.h5\") # You can easily export the filled histograms to hdf5","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additionally, the initial response file can be exported to HDF5 directly","category":"page"},{"location":"","page":"Home","title":"Home","text":"h5f = build_HDF5_file(\"responses_to_file.h5\") # Create h5 file with same structure as responses bins \nfill_HDF5_file!(h5f, nu, \"neutrinos\") # Completely export the response as a table in an hdf5 file at a given path \nfill_HDF5_file!(h5f, data, \"data\") # Completely export the response as a table in an hdf5 file at a given path \nclose(h5f)","category":"page"}]
}
